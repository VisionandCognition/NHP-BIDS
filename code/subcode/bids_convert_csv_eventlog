#!/usr/bin/env python3

import argparse
import pandas as pd
import csv
import numpy as np
import os


def add_missing_stim_info(inp, events, stim_dir):
    # The CTShapedCheckerboard data collected on Jan. 17, 2018 was
    # missing the stimulus information from the event log. This code
    # connects the "NewStimulus" row index with the stimulus CSV files.

    # First check to see if code can find the stimulus CSV files with
    # the names of the tasks.
    indices_to_dup = np.where(events['event'] == 'NewStimulus')[0]
    tasks = events.iloc[indices_to_dup]['task'].unique()

    if stim_dir is None:
        stim_dir = os.path.dirname(inp)

    stim_csvs = {t: '%s/%s.csv' % (stim_dir, t) for t in tasks}
    stim = {}

    # The column that describes important features of the stimulus
    task_stim_col = {
            'CT-Shaped Checkerboard LH': 'CombinedStim',
            'CT-Shaped Checkerboard RH': 'CombinedStim',
            }
    for task, csv in stim_csvs.items():
        try:
            df = pd.read_csv(csv)
            stim[task] = df[task_stim_col[task]]
        except:
            print('No extra stim-info found in %s.' %csv)
            '''
            print('Attempted to read %s. Copy stimulus csv to this '
                  'location if additional stimulus information is needed.' %
                  csv)
            '''
            pass

    already_contains_stim_info = len(
            np.intersect1d(
                events['event'],
                [v for v in task_stim_col.values()])) > 0

    if len(stim) > 0 and not already_contains_stim_info:
        # Add another row after NewStimulus rows
        indices_with_dups = np.sort(np.append(
            np.arange(events.shape[0]),
            indices_to_dup))
        events_dup = events.iloc[indices_with_dups].reset_index(drop=True).copy()
        dup_indices = indices_to_dup + np.arange(len(indices_to_dup)) + 1

        #stim[events_dup.loc[dup_indices, 'task']]
        stim_vals = [stim[row['task']][int(row['info'])-1] for index, row in events_dup.iloc[dup_indices].iterrows()]
        stim_events = [task_stim_col[task] for task in events_dup.iloc[dup_indices]['task'].values.tolist()]

        events_dup.loc[dup_indices, 'info'] = stim_vals
        events_dup.loc[dup_indices, 'event'] = stim_events
        return(events_dup)

    return(events)


def convert_csv_eventlog(inp, out, stim_dir=None):

    events = pd.read_csv(inp)

    mri_triggers = events[(events['event'] == 'MRI_Trigger') &
                          (events['info'] == 'Received')]

    start_time_s = mri_triggers.iloc[0].time_s

    events['time_s'] = events['time_s'] - start_time_s

    if 'record_time_s' in events.columns:  # record_time_s doesn't exist for FG
        events['record_time_s'] = events['record_time_s'] - start_time_s
        events = add_missing_stim_info(inp, events, stim_dir)

    events.to_csv(out, sep='\t', quoting=csv.QUOTE_NONE, index=False,
                  na_rep='n/a', float_format='%0.4f')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Converts CSV eventlogs to TSV event logs with timing '
                    'relative to first MRI trigger.')

    parser.add_argument('-i', type=str, help='Input CSV eventlog')
    parser.add_argument('-o', type=str, help='Output TSV eventlog')
    parser.add_argument('--stim-dir', type=str, help='Directory with Stimulus '
                        'CSV files.')

    args = parser.parse_args()

    convert_csv_eventlog(args.i, args.o, args.stim_dir)
